!! =================================== !
!! The Old French morphophonological/twolc rules file !
!! =================================== !

Alphabet
 a b c d e f g h i j k l m n o p q r s t u v w x y z æ
 á é ó ú í à è ò ù ì ä ë ö ü ï â ê ô û î ç

 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z Æ
 Á É Ó Ú Í À È Ò Ù Ì Ä Ë Ö Ü Ï Â Ê Ô Û Î Ç

%{T%}:t
%{T%}:0

%{D%}:d
%{D%}:0

%{S%}:s
%{S%}:0

%{H%}:h
%{H%}:0

%{I%}:i
%{I%}:y

%{N%}:n
!%{N%}:0

%{G%}:0
%{G%}:e

 %>:0 ;

 

Sets

 Vow = a e i o u y æ 
       á é ó ú í à è ò ù ì ä ë ö ü ï â ê ô û î ;
 Cns = b c ç d f g h j k l m n p q r s t v w x z ;
 Nas = n m ;
 Labial = p, b, f, v, m ;
 HardVow = a o u ;
 SoftVow = e i ;
 
Rules

!! {T}+s and s{T}+s become z
"{T} becomes 0 before an s"
%{T%}:0 <=> _ s: ;

"s can become z when it occurs after {T}"
s:z => %{T%}: _ ;

"s disappears before a {T}s that becomes a z"
s:0 <=> _ %{T%}:0 s:z ;

!! p, f, c, b, and v disappear before inflectional -s
!! FIXME: change to labials + c
"p disappears before inflectional -s"
p:0 <=> _ %>: s: ;

"f disappears before inflectional -s"
f:0 <=> _ %>: s: ;

"c disappears before inflectional -s"
c:0 <=> _ %>: s: ;

"b disappears before inflectional -s"
b:0 <=> _ %>: s: ;

"v disappears before inflectional -s"
v:0 <=> _ %>: s: ;

!! NASAL ALTERATIONS

"after a vowel, m+s becomes ns"
m:n <=> Vow _ s:s ;

"rm+s becomes rs"
m:0 <=> r:r _ s:s ;

! rn+s becomes rz
"s becomes z after rn"
s:z => r:r n:0 _ ;

"n is removed between r_z"
n:0 => r:r _ s:z ;

! n'+s (gn+s) becomes nz
"s becomes z after palatal nasal"
s:z => %{N%}:n _ ;

!"n'+s (gn+s) becomes nz"
!g:0 <=> _ n:n s:z ;

!"n'+s (ng+s) becomes nz"
!s:z <=> n:n g:0 _ ;

!"n'+s (ng+s) becomes nz"
!g:0 <=> n:n _ s:z ;

"n can be doubled"
0:n => n:n _ %>:0 ;

"m can be doubled"
0:m => m:m _ %>:0 ;

"nasal dissimilation" ! FIXME Not working
m:n => _ Labial ;

!! Silent t and d
"unaspirated t can be kept"
%{T%}:t => _ ;

"unaspirated t can be dropped except before e"
%{T%}:0 => _ ;

"unaspirated d can be kept"
%{D%}:d => _ ;

"unaspirated d can be dropped except before e"
%{D%}:0 => _ ;

!! Palatalized vowels
!"i can be expressed as y after vowels" FIXME: Convince me that this one is worth the trouble.
!i:y => Vow _ ;

"i can be expressed as j after i " ! Mostly after Roman numerals
i:j => i: _ ;

"i can be expressed as j after v " ! Roman numerals
i:j => v: _ ;

"i can be expressed as j after x " ! Roman numerals. Find a way to get CJ without confounding with "ci"
i:j => x: _ ;

"e can be expressed as o before i/y"
e:o => _ i: ;

"e can be expressed as o in the -ens suffix"
e:o => i: _ n: s: ;

"ii can be shortened to i before an e or e:o" ! unless ">" between them - ordinals
i:0 => _ i: e: ;

"archiphoneme I can be expressed as i"
%{I%}:i => _ ;

"archiphoneme I can be expressed as y"
%{I%}:y => _ ;

!! Ordinals
"s can become è in the ordinal suffix"
s:è => i _ m:m e:e ;

"e can be inserted before s in the ordinal suffix"
0:e => i _ s:s m:m e:e ;

"optional s can be deleted"
%{S%}:0 => _ ;

"optional s can be kept"
%{S%}:s => _ ;

"optional h can be deleted"
%{H%}:0 => _ ;

"optional h can be kept"
%{H%}:h => _ ;

"l can be doubled"
0:l => l: _ %> ;

"r can be doubled"
0:r => r: _ %> ;

"us can be written as x"
u:0 => _ s:x ;

"us can be written as x"
s:x => u: _ ;

! Palatal nasal
! The palatal nasal can be expressed as ng, gn, or ngn. (Add "in" and "ni" later)
!"the first n can be kept (ngn, ng)"
!%{N%}:n => _ g:g n: ;

!"the first n can be deleted (gn)"
!%{N%}:0 => _ g:g n:n ;

!"the second n can be deleted (ng)"
!n:0 => %{N%}:n g:g _ ;

"palatal nasal always has an n"
%{N%}:n <=> _ ;

"a palatal nasal can be expressed as ngn (1)"
0:g => (0:n) _ %{N%}:n \0: ;

"a palatal nasal can be expressed as ngn (2)"
0:n => _ 0:g %{N%}:n \0: ;

"a palatal nasal can be expressed as ign, in"
0:i => \i: _ (0:n) (0:g) %{N%}:n \0: ;

"a palatal nasal can be expressed as ng"
0:g => %{N%}:n _ ; ! Nothing before the palatal nasal


!"a palatal nasal can be expressed as ni"
!0:i => %{N%}:n _ ;

"e can become a before a nasal (ensemble => ansemble)"
e:a => \c: _ (:i) Nas ;

"ai can become ei before a nasal (saint => seint)"
a:e => _ :i Nas ;

! qu variations
"u can be omitted after q"
u:0 => q:q _ ;

"u is always omitted after q:k"
u:0 <=> q:k _ ;

"q can be expressed as k"
q:k => _ ;

! Variations of ö
"ue can be written as eu"
u:0 => \%>: _ e:e 0:u ;

"ue can be written as eu"
0:u => \%>: u:0 e:e _ ;

"ue can be written as oe"
u:o => \%>: _ e:e ;

"oe can be written as ue"
o:u => \%>: _ e:e ;

"c pronounced [s] becomes ç before o/a"
c:ç <=> _ %> :o|:a ;

"Soft g is written as g unless before soft vowels"
%{G%}:0 <=> _ SoftVow ; 

"Soft g is written as ge before hard vowels"
%{G%}:e <=> _ HardVow ;

!!! SPELLING RULES !!!!
! These were originally in spellrelax.regex, but were moved here to make
! the lexc tests more comprehensive.

"á can be written as a"
á:a => _ ;

"Á can be written as A"
Á:A => _ ;

"à can be written as a"
à:a => _ ;

"À can be written as A"
À:A => _ ;

"é can be written as e"
é:e => _ ;

"É can be written as E"
É:E => _ ;

"è can be written as e"
è:e => _ ;

"È can be written as E"
È:E => _ ;

"ï can be written as i"
ï:i => _ ;

"ü can be written as u"
ü:u => _ ;

"l can become u between a and s"
l:u => :a _ s: ;

"l can become u between ae and s"
l:u => :e _ s: ;

"e can become o before i"
e:o => _ i: ;

"i can become y word-finally"
i:y => _ # ;

